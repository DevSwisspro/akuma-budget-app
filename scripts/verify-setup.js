#!/usr/bin/env node

/**
 * Script de v√©rification de la configuration Supabase
 * Usage: node scripts/verify-setup.js
 */

import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'
import { fileURLToPath } from 'url'
import { dirname, join } from 'path'

// Charger les variables d'environnement
const __filename = fileURLToPath(import.meta.url)
const __dirname = dirname(__filename)
dotenv.config({ path: join(__dirname, '..', '.env') })

const supabaseUrl = process.env.VITE_SUPABASE_URL
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY
const isDevMode = process.env.VITE_DEV_MODE === 'true'

console.log('üîç V√©rification de la configuration Supabase...\n')
console.log('Mode d√©veloppement:', isDevMode ? '‚úÖ Activ√©' : '‚ùå D√©sactiv√©')
console.log('URL Supabase:', supabaseUrl || '‚ùå Non d√©finie')
console.log('Cl√© Supabase:', supabaseKey ? '‚úÖ D√©finie' : '‚ùå Non d√©finie')

// V√©rifier les variables d'environnement
if (!supabaseUrl || !supabaseKey) {
  if (isDevMode) {
    console.log('‚úÖ Mode d√©veloppement d√©tect√© - Utilisation des donn√©es mock')
    console.log('üìù Pour utiliser Supabase, configurez vos vraies cl√©s dans .env')
    console.log('   et changez VITE_DEV_MODE=false')
    process.exit(0)
  } else {
    console.error('‚ùå Variables d\'environnement manquantes !')
    console.error('   VITE_SUPABASE_URL:', supabaseUrl ? '‚úÖ' : '‚ùå')
    console.error('   VITE_SUPABASE_ANON_KEY:', supabaseKey ? '‚úÖ' : '‚ùå')
    console.error('\nüìù Cr√©ez un fichier .env avec :')
    console.error('   VITE_SUPABASE_URL=https://votre-projet.supabase.co')
    console.error('   VITE_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...')
    process.exit(1)
  }
}

if (isDevMode) {
  console.log('‚úÖ Mode d√©veloppement - Application pr√™te avec donn√©es mock')
  console.log('\nüìù Prochaines √©tapes :')
  console.log('   1. Cr√©er un projet Supabase (voir SETUP_INTERACTIF.md)')
  console.log('   2. Configurer vos vraies cl√©s dans .env')
  console.log('   3. Changer VITE_DEV_MODE=false')
  console.log('   4. Red√©marrer l\'application')
  console.log('\nüéâ L\'application fonctionne d√©j√† en mode d√©veloppement !')
  process.exit(0)
}

console.log('‚úÖ Variables d\'environnement trouv√©es')

// Cr√©er le client Supabase
const supabase = createClient(supabaseUrl, supabaseKey)

async function verifyConnection() {
  try {
    console.log('\nüîå Test de connexion √† Supabase...')
    
    // Test de connexion basique
    const { data, error } = await supabase.from('categories').select('count').limit(1)
    
    if (error) {
      console.error('‚ùå Erreur de connexion:', error.message)
      return false
    }
    
    console.log('‚úÖ Connexion √† Supabase r√©ussie')
    return true
  } catch (error) {
    console.error('‚ùå Erreur de connexion:', error.message)
    return false
  }
}

async function verifyTables() {
  try {
    console.log('\nüìä V√©rification des tables...')
    
    const tables = [
      'user_profiles',
      'categories', 
      'custom_categories',
      'transactions',
      'budgets'
    ]
    
    for (const table of tables) {
      try {
        const { data, error } = await supabase.from(table).select('*').limit(1)
        if (error) {
          console.error(`‚ùå Table ${table}:`, error.message)
        } else {
          console.log(`‚úÖ Table ${table}: OK`)
        }
      } catch (error) {
        console.error(`‚ùå Table ${table}:`, error.message)
      }
    }
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification des tables:', error.message)
  }
}

async function verifyFunctions() {
  try {
    console.log('\n‚öôÔ∏è V√©rification des fonctions...')
    
    // Test de la fonction get_user_categories
    try {
      const { data, error } = await supabase.rpc('get_user_categories', { 
        user_uuid: '00000000-0000-0000-0000-000000000000' 
      })
      
      if (error) {
        console.error('‚ùå Fonction get_user_categories:', error.message)
      } else {
        console.log('‚úÖ Fonction get_user_categories: OK')
      }
    } catch (error) {
      console.error('‚ùå Fonction get_user_categories:', error.message)
    }
    
    // Test de la fonction get_user_balance
    try {
      const { data, error } = await supabase.rpc('get_user_balance', { 
        user_uuid: '00000000-0000-0000-0000-000000000000' 
      })
      
      if (error) {
        console.error('‚ùå Fonction get_user_balance:', error.message)
      } else {
        console.log('‚úÖ Fonction get_user_balance: OK')
      }
    } catch (error) {
      console.error('‚ùå Fonction get_user_balance:', error.message)
    }
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification des fonctions:', error.message)
  }
}

async function verifyCategories() {
  try {
    console.log('\nüìÇ V√©rification des cat√©gories pr√©d√©finies...')
    
    const { data, error } = await supabase.from('categories').select('*')
    
    if (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des cat√©gories:', error.message)
      return
    }
    
    if (data.length === 0) {
      console.error('‚ùå Aucune cat√©gorie trouv√©e !')
      console.error('   Ex√©cutez le script SQL pour cr√©er les cat√©gories pr√©d√©finies')
      return
    }
    
    console.log(`‚úÖ ${data.length} cat√©gories trouv√©es`)
    
    // V√©rifier les types de cat√©gories
    const types = [...new Set(data.map(cat => cat.type))]
    console.log('   Types disponibles:', types.join(', '))
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification des cat√©gories:', error.message)
  }
}

async function verifyRLS() {
  try {
    console.log('\nüîí V√©rification des politiques RLS...')
    
    const tables = [
      'user_profiles',
      'custom_categories', 
      'transactions',
      'budgets'
    ]
    
    for (const table of tables) {
      try {
        // Essayer d'acc√©der sans authentification (devrait √©chouer)
        const { data, error } = await supabase.from(table).select('*').limit(1)
        
        if (error && error.message.includes('policy')) {
          console.log(`‚úÖ RLS actif pour ${table}`)
        } else if (data) {
          console.warn(`‚ö†Ô∏è RLS peut-√™tre d√©sactiv√© pour ${table}`)
        } else {
          console.log(`‚úÖ RLS actif pour ${table}`)
        }
      } catch (error) {
        console.log(`‚úÖ RLS actif pour ${table}`)
      }
    }
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification RLS:', error.message)
  }
}

async function main() {
  console.log('üöÄ D√©marrage de la v√©rification...\n')
  
  // V√©rifier la connexion
  const connected = await verifyConnection()
  if (!connected) {
    console.error('\n‚ùå Impossible de se connecter √† Supabase')
    console.error('   V√©rifiez vos variables d\'environnement et votre connexion internet')
    process.exit(1)
  }
  
  // V√©rifier les tables
  await verifyTables()
  
  // V√©rifier les fonctions
  await verifyFunctions()
  
  // V√©rifier les cat√©gories
  await verifyCategories()
  
  // V√©rifier RLS
  await verifyRLS()
  
  console.log('\nüéâ V√©rification termin√©e !')
  console.log('\nüìù Prochaines √©tapes :')
  console.log('   1. D√©marrer l\'application : npm run dev')
  console.log('   2. Cr√©er un compte utilisateur')
  console.log('   3. Tester les fonctionnalit√©s')
  console.log('\nüìö Documentation : INSTALLATION_GUIDE.md')
}

main().catch(console.error)
