#!/usr/bin/env node

/**
 * Script s√©curis√© pour appliquer le sch√©ma via l'API REST Supabase
 * Sans n√©cessiter la cl√© service_role
 */

import { createClient } from '@supabase/supabase-js';

// Configuration Supabase
const supabaseUrl = 'https://nwzqbnofamhlnmasdvyo.supabase.co';
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im53enFibm9mYW1obG5tYXNkdnlvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTU1MjcwNTAsImV4cCI6MjA3MTEwMzA1MH0.zr7lxImULkPATOOxm-TEuIHDQMLE6RA8wHe2VRLQ8Y0';

const supabase = createClient(supabaseUrl, supabaseAnonKey);

// Donn√©es des types √† ins√©rer
const TYPES_DATA = [
  { id: 1, name: 'revenu', description: 'Revenus et entr√©es d\'argent', icon: 'üí∞', color: 'green' },
  { id: 2, name: 'depense_fixe', description: 'D√©penses fixes r√©currentes', icon: 'üè†', color: 'blue' },
  { id: 3, name: 'depense_variable', description: 'D√©penses variables', icon: 'üõí', color: 'orange' },
  { id: 4, name: 'epargne', description: '√âpargne et r√©serves', icon: 'üè¶', color: 'purple' },
  { id: 5, name: 'investissement', description: 'Investissements et placements', icon: 'üìà', color: 'indigo' },
  { id: 6, name: 'dette', description: 'Dettes et emprunts', icon: 'üí≥', color: 'red' },
  { id: 7, name: 'remboursement', description: 'Remboursements de dettes', icon: 'üí∏', color: 'pink' }
];

// Donn√©es des cat√©gories √† ins√©rer
const CATEGORIES_DATA = [
  // Revenus (type_id: 1)
  { type_id: 1, name: 'Salaire', description: 'Salaire principal', icon: 'üíº' },
  { type_id: 1, name: 'Bonus/Primes', description: 'Primes et bonus ponctuels', icon: 'üéÅ' },
  { type_id: 1, name: 'Activit√©s secondaires', description: 'Freelance, missions, etc.', icon: 'üíª' },
  { type_id: 1, name: 'Revenus locatifs', description: 'Revenus d\'immobilier locatif', icon: 'üèòÔ∏è' },
  { type_id: 1, name: 'Dividendes/Int√©r√™ts bancaires', description: 'Revenus financiers', icon: 'üèõÔ∏è' },
  { type_id: 1, name: 'Plus-values/Crypto', description: 'Gains en capital et crypto', icon: '‚Çø' },
  { type_id: 1, name: 'Allocations familiales', description: 'Aides familiales', icon: 'üë∂' },
  { type_id: 1, name: 'Indemnit√©s', description: 'Indemnit√©s diverses', icon: 'üéñÔ∏è' },
  { type_id: 1, name: 'Remboursements', description: 'Remboursements re√ßus', icon: '‚Ü©Ô∏è' },
  { type_id: 1, name: 'Cadeaux/Donations re√ßues', description: 'Dons et cadeaux en argent', icon: 'üéÄ' },

  // D√©penses fixes (type_id: 2)
  { type_id: 2, name: 'Logement', description: 'Loyer, charges, hypoth√®que', icon: 'üè†' },
  { type_id: 2, name: 'Assurances', description: 'Assurances diverses', icon: 'üõ°Ô∏è' },
  { type_id: 2, name: 'Abonnements', description: 'Abonnements r√©currents', icon: 'üì±' },
  { type_id: 2, name: 'Transports', description: 'Transports en commun, carburant', icon: 'üöå' },
  { type_id: 2, name: 'Cr√©dits', description: 'Remboursements de cr√©dits', icon: 'üè¶' },
  { type_id: 2, name: 'Frais bancaires', description: 'Frais de compte, cartes', icon: 'üí≥' },
  { type_id: 2, name: 'T√©l√©phone', description: 'Forfaits t√©l√©phoniques', icon: 'üìû' },
  { type_id: 2, name: 'Imp√¥ts', description: 'Imp√¥ts et taxes', icon: 'üèõÔ∏è' },

  // D√©penses variables (type_id: 3)
  { type_id: 3, name: 'Alimentation', description: 'Courses alimentaires', icon: 'üõí' },
  { type_id: 3, name: 'Restaurants', description: 'Restaurants et livraisons', icon: 'üçΩÔ∏è' },
  { type_id: 3, name: 'Transports variables', description: 'Taxi, Uber, transports occasionnels', icon: 'üöï' },
  { type_id: 3, name: 'Sant√© hors assurance', description: 'Frais m√©dicaux non couverts', icon: 'üè•' },
  { type_id: 3, name: 'Loisirs', description: 'Cin√©ma, spectacles, hobbies', icon: 'üé≠' },
  { type_id: 3, name: 'Vacances', description: 'Voyages et vacances', icon: '‚úàÔ∏è' },
  { type_id: 3, name: 'Shopping', description: 'V√™tements, accessoires', icon: 'üëï' },
  { type_id: 3, name: 'Animaux', description: 'Frais v√©t√©rinaires, nourriture', icon: 'üêï' },
  { type_id: 3, name: 'Entretien logement', description: 'R√©parations, am√©nagements', icon: 'üîß' },
  { type_id: 3, name: 'Achats impr√©vus', description: 'Achats non planifi√©s', icon: '‚ùì' },
  { type_id: 3, name: '√âv√©nements sp√©ciaux', description: 'Mariages, anniversaires', icon: 'üéâ' },

  // √âpargne (type_id: 4)
  { type_id: 4, name: 'Fonds d\'urgence', description: 'R√©serve d\'urgence', icon: 'üö®' },
  { type_id: 4, name: 'Compte √©pargne', description: '√âpargne classique', icon: 'üè¶' },
  { type_id: 4, name: '3√®me pilier', description: 'Pr√©voyance retraite', icon: 'üéØ' },
  { type_id: 4, name: 'Projets long terme', description: '√âpargne pour projets futurs', icon: 'üåü' },
  { type_id: 4, name: 'Fonds de remplacement', description: 'Remplacement √©quipements', icon: 'üîÑ' },

  // Investissement (type_id: 5)
  { type_id: 5, name: 'Bourse', description: 'Actions et ETF', icon: 'üìä' },
  { type_id: 5, name: 'Crypto-monnaies', description: 'Investissements crypto', icon: '‚Çø' },
  { type_id: 5, name: 'Immobilier/Crowdfunding', description: 'Investissement immobilier', icon: 'üè¢' },
  { type_id: 5, name: 'Plan de pr√©voyance', description: 'Plans de pr√©voyance priv√©s', icon: 'üìã' },

  // Dettes (type_id: 6)
  { type_id: 6, name: 'Carte de cr√©dit', description: 'Soldes cartes de cr√©dit', icon: 'üí≥' },
  { type_id: 6, name: 'Pr√™t √©tudiant', description: 'Pr√™ts √©tudiants', icon: 'üéì' },
  { type_id: 6, name: 'Pr√™t personnel', description: 'Pr√™ts personnels', icon: 'üí∞' },
  { type_id: 6, name: 'Pr√™t auto', description: 'Financement v√©hicule', icon: 'üöó' },
  { type_id: 6, name: 'Dette m√©dicale', description: 'Dettes m√©dicales', icon: 'üè•' },
  { type_id: 6, name: 'Autres dettes', description: 'Autres dettes diverses', icon: 'üìù' },

  // Remboursements (type_id: 7)
  { type_id: 7, name: 'Paiement de dettes', description: 'Remboursements de dettes', icon: 'üí∏' },
  { type_id: 7, name: 'Remboursements internes', description: 'Remboursements entre comptes', icon: 'üîÑ' }
];

async function checkAndFixSchema() {
  console.log('üîß V√©rification et correction du sch√©ma Supabase...\n');

  try {
    // 1. V√©rifier les types existants
    console.log('1. V√©rification des types...');
    const { data: existingTypes, error: typesError } = await supabase
      .from('types')
      .select('*');

    if (typesError) {
      console.log(`   ‚ùå Erreur types: ${typesError.message}`);
      return;
    }

    console.log(`   üìä ${existingTypes.length} types trouv√©s dans la base`);

    // 2. Si pas de types, les ins√©rer
    if (existingTypes.length === 0) {
      console.log('2. Insertion des types pr√©d√©finis...');
      
      for (const typeData of TYPES_DATA) {
        try {
          const { error } = await supabase
            .from('types')
            .insert([typeData]);
          
          if (error) {
            console.log(`   ‚ö†Ô∏è  Erreur insertion type ${typeData.name}: ${error.message}`);
          } else {
            console.log(`   ‚úÖ Type "${typeData.name}" ins√©r√©`);
          }
        } catch (err) {
          console.log(`   ‚ùå Erreur: ${err.message}`);
        }
      }
    } else {
      console.log('   ‚ÑπÔ∏è  Types d√©j√† pr√©sents, passage √† l\'√©tape suivante');
    }

    // 3. V√©rifier les cat√©gories
    console.log('\n3. V√©rification des cat√©gories...');
    const { data: existingCategories, error: categoriesError } = await supabase
      .from('categories')
      .select('*');

    if (categoriesError) {
      console.log(`   ‚ùå Erreur cat√©gories: ${categoriesError.message}`);
      
      // Si erreur de colonne, il faut peut-√™tre recreer la table
      if (categoriesError.message.includes('column') && categoriesError.message.includes('does not exist')) {
        console.log('   üîß Structure de table incorrecte d√©tect√©e');
        console.log('   ‚ö†Ô∏è  ATTENTION: Vous devez appliquer le sch√©ma complet via Supabase Dashboard');
        console.log('   üìã √âtapes:');
        console.log('   1. Allez dans Supabase Dashboard > SQL Editor');
        console.log('   2. Ex√©cutez le contenu du fichier fix-schema-complete.sql');
        return;
      }
    } else {
      console.log(`   üìä ${existingCategories.length} cat√©gories trouv√©es`);
      
      // Compter par type
      const byType = {};
      existingCategories.forEach(cat => {
        if (!byType[cat.type_id]) byType[cat.type_id] = 0;
        byType[cat.type_id]++;
      });
      
      Object.entries(byType).forEach(([typeId, count]) => {
        const typeName = TYPES_DATA.find(t => t.id == typeId)?.name || `Type ${typeId}`;
        console.log(`      ${typeName}: ${count} cat√©gories`);
      });
    }

    // 4. V√©rifier si on peut ins√©rer des cat√©gories manquantes
    if (existingCategories && existingCategories.length < CATEGORIES_DATA.length) {
      console.log('\n4. Insertion des cat√©gories manquantes...');
      
      for (const categoryData of CATEGORIES_DATA) {
        const exists = existingCategories.find(c => 
          c.name === categoryData.name && c.type_id === categoryData.type_id
        );
        
        if (!exists) {
          try {
            const { error } = await supabase
              .from('categories')
              .insert([categoryData]);
            
            if (error) {
              console.log(`   ‚ö†Ô∏è  Erreur insertion "${categoryData.name}": ${error.message}`);
            } else {
              console.log(`   ‚úÖ Cat√©gorie "${categoryData.name}" ins√©r√©e`);
            }
          } catch (err) {
            console.log(`   ‚ùå Erreur: ${err.message}`);
          }
        }
      }
    }

    // 5. V√©rification finale
    console.log('\n5. V√©rification finale...');
    const { data: finalTypes } = await supabase.from('types').select('*');
    const { data: finalCategories } = await supabase.from('categories').select('*');
    
    console.log(`   ‚úÖ ${finalTypes?.length || 0} types au total`);
    console.log(`   ‚úÖ ${finalCategories?.length || 0} cat√©gories au total`);

    if (finalTypes?.length === 7 && finalCategories?.length >= 41) {
      console.log('\nüéâ SCH√âMA CORRECT ET COMPLET !');
    } else {
      console.log('\n‚ö†Ô∏è  Sch√©ma incomplet. Ex√©cutez fix-schema-complete.sql manuellement.');
    }

  } catch (error) {
    console.error('\nüí• ERREUR FATALE:', error.message);
    console.log('\nüîß SOLUTION:');
    console.log('1. V√©rifiez la connexion Supabase');
    console.log('2. Ex√©cutez fix-schema-complete.sql dans Supabase Dashboard > SQL Editor');
  }
}

// Ex√©cution
checkAndFixSchema();
