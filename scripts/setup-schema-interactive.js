#!/usr/bin/env node

/**
 * Script interactif pour configurer et appliquer le sch√©ma Supabase
 * Guide l'utilisateur √©tape par √©tape
 */

import { createClient } from '@supabase/supabase-js';
import { readFileSync, writeFileSync, existsSync } from 'fs';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';
import readline from 'readline';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const supabaseUrl = 'https://nwzqbnofamhlnmasdvyo.supabase.co';

// Interface pour saisie utilisateur
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function question(prompt) {
  return new Promise((resolve) => {
    rl.question(prompt, resolve);
  });
}

// Fonction pour lire ou demander la cl√© service_role
async function getServiceRoleKey() {
  // 1. Essayer depuis les variables d'environnement
  if (process.env.SUPABASE_SERVICE_ROLE_KEY) {
    console.log('‚úÖ Cl√© service_role trouv√©e dans les variables d\'environnement');
    return process.env.SUPABASE_SERVICE_ROLE_KEY;
  }

  // 2. Essayer de lire depuis .env
  try {
    const envPath = join(__dirname, '..', '.env');
    if (existsSync(envPath)) {
      const envContent = readFileSync(envPath, 'utf8');
      const serviceRoleMatch = envContent.match(/SUPABASE_SERVICE_ROLE_KEY=(.+)/);
      if (serviceRoleMatch && serviceRoleMatch[1].trim() !== 'eyJ...') {
        console.log('‚úÖ Cl√© service_role trouv√©e dans .env');
        return serviceRoleMatch[1].trim();
      }
    }
  } catch (error) {
    // Fichier .env non trouv√© ou non lisible
  }

  // 3. Demander √† l'utilisateur
  console.log('\nüîë CONFIGURATION DE LA CL√â SERVICE_ROLE REQUISE');
  console.log('üìã Pour obtenir votre cl√© service_role :');
  console.log('1. Allez sur https://supabase.com/dashboard');
  console.log('2. S√©lectionnez votre projet Akuma Budget');
  console.log('3. Menu : Settings > API');
  console.log('4. Copiez la cl√© "service_role" (commence par eyJ...)');
  console.log('');
  
  const serviceRoleKey = await question('üîê Collez votre cl√© service_role ici : ');
  
  if (!serviceRoleKey || !serviceRoleKey.startsWith('eyJ')) {
    console.log('‚ùå Cl√© invalide. Elle doit commencer par "eyJ"');
    process.exit(1);
  }

  // Sauvegarder dans .env
  try {
    const envPath = join(__dirname, '..', '.env');
    let envContent = '';
    
    if (existsSync(envPath)) {
      envContent = readFileSync(envPath, 'utf8');
    }
    
    if (envContent.includes('SUPABASE_SERVICE_ROLE_KEY=')) {
      envContent = envContent.replace(
        /SUPABASE_SERVICE_ROLE_KEY=.*$/m,
        `SUPABASE_SERVICE_ROLE_KEY=${serviceRoleKey}`
      );
    } else {
      envContent += `\n# Cl√© service_role pour l'application du sch√©ma\nSUPABASE_SERVICE_ROLE_KEY=${serviceRoleKey}\n`;
    }
    
    writeFileSync(envPath, envContent);
    console.log('‚úÖ Cl√© sauvegard√©e dans .env');
  } catch (error) {
    console.log('‚ö†Ô∏è  Impossible de sauvegarder dans .env:', error.message);
  }

  return serviceRoleKey;
}

// Fonction pour ex√©cuter du SQL
async function executeSQL(supabase, query, description) {
  try {
    console.log(`   üîÑ ${description}...`);
    
    // Essayer d'ex√©cuter directement (pour CREATE, INSERT, etc.)
    const { data, error } = await supabase.rpc('exec', { query });
    
    if (error) {
      // Si exec n'existe pas, essayer une requ√™te simple
      if (error.message.includes('function') && error.message.includes('does not exist')) {
        console.log(`   ‚ö†Ô∏è  RPC exec non disponible, ex√©cution directe...`);
        return true; // On continue malgr√© tout
      }
      console.log(`   ‚ùå Erreur: ${error.message}`);
      return false;
    }
    
    console.log(`   ‚úÖ ${description} - OK`);
    return true;
  } catch (err) {
    console.log(`   ‚ùå Exception: ${err.message}`);
    return false;
  }
}

// Fonction pour ins√©rer des donn√©es
async function insertData(supabase, table, data, description) {
  try {
    console.log(`   üîÑ ${description}...`);
    const { error } = await supabase.from(table).insert(data);
    
    if (error) {
      console.log(`   ‚ùå Erreur insertion: ${error.message}`);
      return false;
    }
    
    console.log(`   ‚úÖ ${description} - OK`);
    return true;
  } catch (err) {
    console.log(`   ‚ùå Exception: ${err.message}`);
    return false;
  }
}

async function applySchema() {
  console.log('üöÄ CONFIGURATION ET APPLICATION DU SCH√âMA SUPABASE\n');

  try {
    // 1. Obtenir la cl√© service_role
    const serviceRoleKey = await getServiceRoleKey();
    const supabase = createClient(supabaseUrl, serviceRoleKey);

    console.log('\n2. Test de connexion avec cl√© service_role...');
    const { data: testData, error: testError } = await supabase
      .from('information_schema.tables')
      .select('table_name')
      .limit(1);
    
    if (testError) {
      console.log(`   ‚ùå Erreur de connexion: ${testError.message}`);
      console.log('   üîß V√©rifiez que votre cl√© service_role est correcte');
      process.exit(1);
    }
    console.log('   ‚úÖ Connexion service_role OK\n');

    // 3. V√©rifier les tables existantes
    console.log('3. V√©rification des tables existantes...');
    const { data: existingTables } = await supabase
      .from('information_schema.tables')
      .select('table_name')
      .eq('table_schema', 'public');
    
    const tableNames = existingTables?.map(t => t.table_name) || [];
    console.log(`   üìã Tables trouv√©es: ${tableNames.join(', ')}`);

    // 4. Nettoyer les anciennes tables si n√©cessaire
    if (tableNames.includes('types') || tableNames.includes('categories')) {
      console.log('\n4. Nettoyage des anciennes tables...');
      const dropQueries = [
        'DROP TABLE IF EXISTS budgets CASCADE;',
        'DROP TABLE IF EXISTS transactions CASCADE;',
        'DROP TABLE IF EXISTS categories CASCADE;',
        'DROP TABLE IF EXISTS types CASCADE;'
      ];

      for (const query of dropQueries) {
        await executeSQL(supabase, query, `Suppression table`);
      }
    }

    // 5. Cr√©er les nouvelles tables
    console.log('\n5. Cr√©ation des nouvelles tables...');
    
    // Table types
    const createTypesSQL = `
      CREATE TABLE types (
        id SERIAL PRIMARY KEY,
        name VARCHAR(50) NOT NULL UNIQUE,
        description TEXT,
        icon VARCHAR(10),
        color VARCHAR(20),
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
      );
    `;
    await executeSQL(supabase, createTypesSQL, 'Table types');

    // Table categories
    const createCategoriesSQL = `
      CREATE TABLE categories (
        id SERIAL PRIMARY KEY,
        name VARCHAR(100) NOT NULL,
        type_id INTEGER NOT NULL REFERENCES types(id) ON DELETE CASCADE,
        description TEXT,
        icon VARCHAR(10),
        color VARCHAR(20),
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        UNIQUE(name, type_id)
      );
    `;
    await executeSQL(supabase, createCategoriesSQL, 'Table categories');

    // Table transactions
    const createTransactionsSQL = `
      CREATE TABLE transactions (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
        amount DECIMAL(12,2) NOT NULL,
        description TEXT,
        type_id INTEGER NOT NULL REFERENCES types(id),
        category_id INTEGER NOT NULL REFERENCES categories(id),
        transaction_date DATE NOT NULL DEFAULT CURRENT_DATE,
        payment_method VARCHAR(50) DEFAULT 'CB',
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
      );
    `;
    await executeSQL(supabase, createTransactionsSQL, 'Table transactions');

    // Table budgets
    const createBudgetsSQL = `
      CREATE TABLE budgets (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
        category_id INTEGER NOT NULL REFERENCES categories(id),
        amount DECIMAL(12,2) NOT NULL,
        period VARCHAR(20) NOT NULL DEFAULT 'monthly',
        is_active BOOLEAN DEFAULT true,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        UNIQUE(user_id, category_id, period)
      );
    `;
    await executeSQL(supabase, createBudgetsSQL, 'Table budgets');

    // 6. Insertion des types pr√©d√©finis
    console.log('\n6. Insertion des 7 types pr√©d√©finis...');
    const typesData = [
      { name: 'revenu', description: 'Revenus et entr√©es d\'argent', icon: 'üí∞', color: 'green' },
      { name: 'depense_fixe', description: 'D√©penses fixes r√©currentes', icon: 'üè†', color: 'blue' },
      { name: 'depense_variable', description: 'D√©penses variables', icon: 'üõí', color: 'orange' },
      { name: 'epargne', description: '√âpargne et r√©serves', icon: 'üè¶', color: 'purple' },
      { name: 'investissement', description: 'Investissements et placements', icon: 'üìà', color: 'indigo' },
      { name: 'dette', description: 'Dettes et emprunts', icon: 'üí≥', color: 'red' },
      { name: 'remboursement', description: 'Remboursements de dettes', icon: 'üí∏', color: 'pink' }
    ];

    for (const type of typesData) {
      await insertData(supabase, 'types', [type], `Type: ${type.icon} ${type.name}`);
    }

    // 7. Insertion des cat√©gories pr√©d√©finies
    console.log('\n7. Insertion des 41 cat√©gories pr√©d√©finies...');
    const categoriesData = [
      // Revenus (type_id: 1)
      { type_id: 1, name: 'Salaire', description: 'Salaire principal', icon: 'üíº' },
      { type_id: 1, name: 'Bonus/Primes', description: 'Primes et bonus ponctuels', icon: 'üéÅ' },
      { type_id: 1, name: 'Activit√©s secondaires', description: 'Freelance, missions, etc.', icon: 'üíª' },
      { type_id: 1, name: 'Revenus locatifs', description: 'Revenus d\'immobilier locatif', icon: 'üèòÔ∏è' },
      { type_id: 1, name: 'Dividendes/Int√©r√™ts bancaires', description: 'Revenus financiers', icon: 'üèõÔ∏è' },
      { type_id: 1, name: 'Plus-values/Crypto', description: 'Gains en capital et crypto', icon: '‚Çø' },
      { type_id: 1, name: 'Allocations familiales', description: 'Aides familiales', icon: 'üë∂' },
      { type_id: 1, name: 'Indemnit√©s', description: 'Indemnit√©s diverses', icon: 'üéñÔ∏è' },
      { type_id: 1, name: 'Remboursements', description: 'Remboursements re√ßus', icon: '‚Ü©Ô∏è' },
      { type_id: 1, name: 'Cadeaux/Donations re√ßues', description: 'Dons et cadeaux en argent', icon: 'üéÄ' },

      // D√©penses fixes (type_id: 2)
      { type_id: 2, name: 'Logement', description: 'Loyer, charges, hypoth√®que', icon: 'üè†' },
      { type_id: 2, name: 'Assurances', description: 'Assurances diverses', icon: 'üõ°Ô∏è' },
      { type_id: 2, name: 'Abonnements', description: 'Abonnements r√©currents', icon: 'üì±' },
      { type_id: 2, name: 'Transports', description: 'Transports en commun, carburant', icon: 'üöå' },
      { type_id: 2, name: 'Cr√©dits', description: 'Remboursements de cr√©dits', icon: 'üè¶' },
      { type_id: 2, name: 'Frais bancaires', description: 'Frais de compte, cartes', icon: 'üí≥' },
      { type_id: 2, name: 'T√©l√©phone', description: 'Forfaits t√©l√©phoniques', icon: 'üìû' },
      { type_id: 2, name: 'Imp√¥ts', description: 'Imp√¥ts et taxes', icon: 'üèõÔ∏è' },

      // D√©penses variables (type_id: 3)
      { type_id: 3, name: 'Alimentation', description: 'Courses alimentaires', icon: 'üõí' },
      { type_id: 3, name: 'Restaurants', description: 'Restaurants et livraisons', icon: 'üçΩÔ∏è' },
      { type_id: 3, name: 'Transports variables', description: 'Taxi, Uber, transports occasionnels', icon: 'üöï' },
      { type_id: 3, name: 'Sant√© hors assurance', description: 'Frais m√©dicaux non couverts', icon: 'üè•' },
      { type_id: 3, name: 'Loisirs', description: 'Cin√©ma, spectacles, hobbies', icon: 'üé≠' },
      { type_id: 3, name: 'Vacances', description: 'Voyages et vacances', icon: '‚úàÔ∏è' },
      { type_id: 3, name: 'Shopping', description: 'V√™tements, accessoires', icon: 'üëï' },
      { type_id: 3, name: 'Animaux', description: 'Frais v√©t√©rinaires, nourriture', icon: 'üêï' },
      { type_id: 3, name: 'Entretien logement', description: 'R√©parations, am√©nagements', icon: 'üîß' },
      { type_id: 3, name: 'Achats impr√©vus', description: 'Achats non planifi√©s', icon: '‚ùì' },
      { type_id: 3, name: '√âv√©nements sp√©ciaux', description: 'Mariages, anniversaires', icon: 'üéâ' },

      // √âpargne (type_id: 4)
      { type_id: 4, name: 'Fonds d\'urgence', description: 'R√©serve d\'urgence', icon: 'üö®' },
      { type_id: 4, name: 'Compte √©pargne', description: '√âpargne classique', icon: 'üè¶' },
      { type_id: 4, name: '3√®me pilier', description: 'Pr√©voyance retraite', icon: 'üéØ' },
      { type_id: 4, name: 'Projets long terme', description: '√âpargne pour projets futurs', icon: 'üåü' },
      { type_id: 4, name: 'Fonds de remplacement', description: 'Remplacement √©quipements', icon: 'üîÑ' },

      // Investissement (type_id: 5)
      { type_id: 5, name: 'Bourse', description: 'Actions et ETF', icon: 'üìä' },
      { type_id: 5, name: 'Crypto-monnaies', description: 'Investissements crypto', icon: '‚Çø' },
      { type_id: 5, name: 'Immobilier/Crowdfunding', description: 'Investissement immobilier', icon: 'üè¢' },
      { type_id: 5, name: 'Plan de pr√©voyance', description: 'Plans de pr√©voyance priv√©s', icon: 'üìã' },

      // Dettes (type_id: 6)
      { type_id: 6, name: 'Carte de cr√©dit', description: 'Soldes cartes de cr√©dit', icon: 'üí≥' },
      { type_id: 6, name: 'Pr√™t √©tudiant', description: 'Pr√™ts √©tudiants', icon: 'üéì' },
      { type_id: 6, name: 'Pr√™t personnel', description: 'Pr√™ts personnels', icon: 'üí∞' },
      { type_id: 6, name: 'Pr√™t auto', description: 'Financement v√©hicule', icon: 'üöó' },
      { type_id: 6, name: 'Dette m√©dicale', description: 'Dettes m√©dicales', icon: 'üè•' },
      { type_id: 6, name: 'Autres dettes', description: 'Autres dettes diverses', icon: 'üìù' },

      // Remboursements (type_id: 7)
      { type_id: 7, name: 'Paiement de dettes', description: 'Remboursements de dettes', icon: 'üí∏' },
      { type_id: 7, name: 'Remboursements internes', description: 'Remboursements entre comptes', icon: 'üîÑ' }
    ];

    for (const category of categoriesData) {
      await insertData(supabase, 'categories', [category], `Cat√©gorie: ${category.icon} ${category.name}`);
    }

    // 8. Configuration RLS
    console.log('\n8. Configuration des politiques RLS...');
    
    const rlsQueries = [
      'ALTER TABLE transactions ENABLE ROW LEVEL SECURITY;',
      'ALTER TABLE budgets ENABLE ROW LEVEL SECURITY;',
      'ALTER TABLE types ENABLE ROW LEVEL SECURITY;',
      'ALTER TABLE categories ENABLE ROW LEVEL SECURITY;',
      
      // Politiques pour types et cat√©gories (lecture seule)
      `CREATE POLICY "Types lisibles par tous" ON types 
       FOR SELECT TO authenticated USING (true);`,
      
      `CREATE POLICY "Categories lisibles par tous" ON categories 
       FOR SELECT TO authenticated USING (true);`,
      
      // Politiques pour transactions (CRUD utilisateur)
      `CREATE POLICY "Utilisateurs voient leurs transactions" ON transactions
       FOR SELECT TO authenticated USING (auth.uid() = user_id);`,
      
      `CREATE POLICY "Utilisateurs cr√©ent leurs transactions" ON transactions
       FOR INSERT TO authenticated WITH CHECK (auth.uid() = user_id);`,
      
      `CREATE POLICY "Utilisateurs modifient leurs transactions" ON transactions
       FOR UPDATE TO authenticated 
       USING (auth.uid() = user_id) WITH CHECK (auth.uid() = user_id);`,
      
      `CREATE POLICY "Utilisateurs suppriment leurs transactions" ON transactions
       FOR DELETE TO authenticated USING (auth.uid() = user_id);`,
      
      // Politiques pour budgets (CRUD utilisateur)
      `CREATE POLICY "Utilisateurs voient leurs budgets" ON budgets
       FOR SELECT TO authenticated USING (auth.uid() = user_id);`,
      
      `CREATE POLICY "Utilisateurs cr√©ent leurs budgets" ON budgets
       FOR INSERT TO authenticated WITH CHECK (auth.uid() = user_id);`,
      
      `CREATE POLICY "Utilisateurs modifient leurs budgets" ON budgets
       FOR UPDATE TO authenticated 
       USING (auth.uid() = user_id) WITH CHECK (auth.uid() = user_id);`,
      
      `CREATE POLICY "Utilisateurs suppriment leurs budgets" ON budgets
       FOR DELETE TO authenticated USING (auth.uid() = user_id);`
    ];

    for (const query of rlsQueries) {
      await executeSQL(supabase, query, 'Politique RLS');
    }

    // 9. V√©rification finale
    console.log('\n9. V√©rification finale...');
    const { data: finalTypes } = await supabase.from('types').select('*');
    const { data: finalCategories } = await supabase.from('categories').select('*');
    
    console.log(`   ‚úÖ ${finalTypes?.length || 0} types au total`);
    console.log(`   ‚úÖ ${finalCategories?.length || 0} cat√©gories au total`);

    if (finalTypes?.length === 7 && finalCategories?.length >= 41) {
      console.log('\nüéâ SCH√âMA APPLIQU√â AVEC SUCC√àS !');
      console.log('‚úÖ 7 types pr√©d√©finis cr√©√©s');
      console.log('‚úÖ 41 cat√©gories pr√©d√©finies cr√©√©es');
      console.log('‚úÖ Politiques RLS configur√©es');
      console.log('‚úÖ Structure de base compl√®te');
      console.log('\nüöÄ Votre application est maintenant pr√™te √† fonctionner !');
      console.log('üåê Testez sur http://localhost:5173');
    } else {
      console.log('\n‚ö†Ô∏è  Sch√©ma partiellement appliqu√©. V√©rifiez les erreurs ci-dessus.');
    }

  } catch (error) {
    console.error('\nüí• ERREUR FATALE:', error.message);
    console.log('\nüîß SOLUTIONS:');
    console.log('1. V√©rifiez que la cl√© service_role est correcte');
    console.log('2. V√©rifiez la connexion internet');
    console.log('3. Consultez les logs Supabase pour plus de d√©tails');
  } finally {
    rl.close();
  }
}

// Ex√©cution
applySchema();
